#!/env/php
<?php

$options = getopt("fb");

$scriptPath = realpath(__DIR__ . '/..');

require $scriptPath . '/vendor/autoload.php';

$config = require $scriptPath . '/config.php';

$runtimeTimestamp = strtotime(date('Y-m-d') . $config['backup_times']);
$runtimeHour = date('G', $runtimeTimestamp);

$currentHour = date('G');

if(!isset($options['f'])) {

    if ($runtimeHour != $currentHour) {
        exit('Not time yet.');
    }

    // Let's make sure we're up to date with the latest version.
    exec('cd ' . $scriptPath . '; git pull origin master; composer install --no-interaction --no-dev --prefer-dist');
}
// First, let's evaluate database backup rules

$databaseRunDays = $config['backup_dates']['database'];

$doWeRun = determineIfWeRunToday($databaseRunDays);

if ($doWeRun) {
    exec('php ' . $scriptPath . '/bin/databaseBackup');
}

// Next, let's evaluate full files

$databaseRunDays = $config['backup_dates']['full'];

$doWeRun = determineIfWeRunToday($databaseRunDays);

if ($doWeRun) {
    exec('php ' . $scriptPath . '/bin/fullBackup');
}

// Now, let's manage the backups.
exec('php ' . $scriptPath . '/bin/manageBackups');

// Helper functions.
function determineIfWeRunToday($daysToRun)
{
    global $options;

    if(isset($options['b'])) {
        return true;
    }

    $length = strlen($daysToRun);

    // No days, we don't run.
    if(!$length) {
        return false;
    }

    for($i = 0; $i < $length; $i++) {
        $day = $daysToRun[$i];

        if(date('w') == $day) {
            return true;
        }
    }

    return false;
}
